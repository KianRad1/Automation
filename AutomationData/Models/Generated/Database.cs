




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `Automasion`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Server=10.1.1.95;Initial Catalog=Automasion;user id=sa; password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Automasion.Models.Generated
{

	public partial class AutomasionDB : Database
	{
		public AutomasionDB() 
			: base("Automasion")
		{
			CommonConstruct();
		}

		public AutomasionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			AutomasionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static AutomasionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new AutomasionDB();
        }

		[ThreadStatic] static AutomasionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static AutomasionDB repo { get { return AutomasionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.Files")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class File : AutomasionDB.Record<File>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Type { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public byte[] Content { get; set; }



	}

    

	[TableName("dbo.Levels")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Level : AutomasionDB.Record<Level>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Title { get; set; }



	}

    

	[TableName("dbo.Privilege")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Privilege : AutomasionDB.Record<Privilege>  
    {



		[Column] public long ID { get; set; }





		[Column] public Guid? gref { get; set; }





		[Column] public Guid gid { get; set; }





		[Column] public string Title { get; set; }



	}

    

	[TableName("dbo.RequestComment")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class RequestComment : AutomasionDB.Record<RequestComment>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Comment { get; set; }





		[Column] public long RequestID { get; set; }





		[Column] public string UserName { get; set; }





		[Column] public long UserID { get; set; }



	}

    

	[TableName("dbo.RequestDocument")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class RequestDocument : AutomasionDB.Record<RequestDocument>  
    {



		[Column] public long ID { get; set; }





		[Column] public long? SupervisorID { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? CreatedOn { get; set; }





		[Column] public long? StatusID { get; set; }





		[Column] public long? FileID { get; set; }





		[Column] public string description { get; set; }





		[Column] public long TypeID { get; set; }





		[Column] public long UserID { get; set; }





		[Column] public long? CurrentLevel { get; set; }





		[Column] public long? LevelPriority { get; set; }





		[Column] public bool? Sent { get; set; }



	}

    

	[TableName("dbo.RequestType")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class RequestType : AutomasionDB.Record<RequestType>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public byte[] TemplateFile { get; set; }



	}

    

	[TableName("dbo.RequestTypeDetail")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class RequestTypeDetail : AutomasionDB.Record<RequestTypeDetail>  
    {



		[Column] public long ID { get; set; }





		[Column] public long RequestTypeID { get; set; }





		[Column] public long LevelID { get; set; }





		[Column] public long Priority { get; set; }



	}

    

	[TableName("dbo.RolePrivilege")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class RolePrivilege : AutomasionDB.Record<RolePrivilege>  
    {



		[Column] public long ID { get; set; }





		[Column] public long RoleId { get; set; }





		[Column] public long PrivilegeID { get; set; }



	}

    

	[TableName("dbo.Roles")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Role : AutomasionDB.Record<Role>  
    {



		[Column] public long ID { get; set; }





		[Column] public string RoleName { get; set; }





		[Column] public int? RoleLevel { get; set; }



	}

    

	[TableName("dbo.Status")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Status : AutomasionDB.Record<Status>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string LatinTitle { get; set; }



	}

    

	[TableName("dbo.sysdiagrams")]



	[PrimaryKey("diagram_id")]




	[ExplicitColumns]

    public partial class sysdiagram : AutomasionDB.Record<sysdiagram>  
    {



		[Column] public string name { get; set; }





		[Column] public int principal_id { get; set; }





		[Column] public int diagram_id { get; set; }





		[Column] public int? version { get; set; }





		[Column] public byte[] definition { get; set; }



	}

    

	[TableName("dbo.Test")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Test : AutomasionDB.Record<Test>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public DateTime BusinessDate { get; set; }





		[Column] public int MTI { get; set; }





		[Column] public int ResponseCode { get; set; }





		[Column] public int RevFlag { get; set; }





		[Column] public long RRN { get; set; }





		[Column] public int TerminalNumber { get; set; }



	}

    

	[TableName("dbo.UserRole")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class UserRole : AutomasionDB.Record<UserRole>  
    {



		[Column] public long ID { get; set; }





		[Column] public long UserID { get; set; }





		[Column] public long RoleID { get; set; }



	}

    

	[TableName("dbo.Users")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class User : AutomasionDB.Record<User>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Username { get; set; }





		[Column] public string Password { get; set; }





		[Column] public string Salt { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Family { get; set; }





		[Column] public string Email { get; set; }





		[Column] public string Address { get; set; }





		[Column] public string Mobile { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public bool IsManager { get; set; }





		[Column] public long? Level { get; set; }



	}


}
